#+title: etcd
#+roam_tags: self-host service-configuration
* info

  redhat -> coreos -> etcd

  [[https://etcd.io/][doc]]
  [[https://github.com/etcd-io][git]]

  3.5的etcd和之前的版本有很大的不同，主要是因为go mod导致的文件路径改动
  
* 把玩一下

** 编译安装
   make即make build,即./build本地的一个shell脚本

   编译出来两个可执行文件
   - ./bin/etcd :: 是拿来跑的server，单机也可以启动
   - ./bin/etcdctl :: 是相当于client类似功能的东西，更主要是控制
  
** 单节点
   ./bin/etcd 其实可以直接起，默认端口2379

   ./bin/etcdctl --endpoints=etcd的地址 put/get/lease/watch/lock 等等功能
   
* 基本用法
  
** 服务发现
   默认前缀 _etcd/registry

** kv
   - put/get/del
   - --from-key :: 从开始
   - --prefix :: 前缀
   - --rev :: 第n个历史版本
  
** watch
   查看key变化情况
   
** lease
   lease grant 60得到一个hash,附在--lease后面可以共享ttl

   lease keep-alive 这个hash可以续

   lease timetolive 查看ttl
   
* 文件结构
  比较乱，没什么层次

  - api :: 不知道干嘛的
  - bin :: 打出来的二进制放的地方，运行makefile才会有
  - client :: 放客户端，v2和v3对应的是不兼容的服务器版本，两者不是同一种功能的提升
  - contrib :: 一些工具的配置文件，运维用的
  - default.etcd :: 初始数据的例子
  - Documentation :: markdown文档
  - etcdctl :: etcdctl的逻辑
  - hack :: 一些工具配置文件，开发用的
  - pkg :: 一些逻辑
  - raft :: raft
  - scripts :: 开发脚本
  - security :: 一些文档，没啥用
  - server :: 服务器逻辑
  - tests :: 针对二进制功能的测试文件
  - tools :: 一些脚本工具，类似于mysqldump
  
** 入口文件
   服务器主文件在server/main.go，其他服务器实现也在server/下

   ctl主文件在etcdctl/main.go

   当然我们主要用的是server
** 基本服务器实现

*** log
    默认使用zap，文档里的capnslog已经deprecated了

*** monitor
    在/metrics里面

*** cmd
    使用cobra
    
** 逻辑分发
   在server/etcdmain/etcd.go:startEtcdOrProxyV2里

   常规操作，初始化config和log

   判断运行模式，有server和proxy两种

   他会从文件名判断一下，这两种模式的文件夹名不同，如果已有文件检查到哪个就运行哪个

   然后看是不是server满了，满了，而且一个fallback的选项打开了之后，就还是proxy，没打开就退出了

   主要我们用的还是server，也主要看这个
   
*** config
    初始化config在server/config.go里
    flag用的是标准库的flag，continueonerror
    
** 主逻辑
   从startEtcd到server/embed/etcd.go

   一开头调用外部Config的validate方法，这个方法干的事情很多
   - 确认log输出
     - 输出路径，里面有一个/dev/null就全部不输出
     - 日志等级
     - 是否用journal
     - 记录grpclog的日志
     - 记录tls的日志
   - 几个url只能是ip，Unix路径和localhost，但是hosturl可以是域名
   - 还有一些raft和存储的配置，比如不能等于0，大于几倍这种

   之后读取之前的文件，data文件夹这种

   有自己的config方法，不过都是之前引过来重新组合的

   start方法是运行

   有peer, client, monitor三个主要服务，
   - peer处理来自其他etcd的请求，是一个包装成http的grpc服务
   - client处理用户请求，也是同样的包装
   - monitor搞一些监控内容
    
   
* etcd实现
  主要是实现可以服务发现的接口
  
** 接口
   提供http和protobuf的接口

** raft

** 存储

